#pragma once

#include"Logger.h"
#include"dmgRegisters.h"
#include"InterruptManager.h"
#include"MBC.h"
#include"PPU.h"
#include"APU.h"
#include"Timer.h"
#include"Joypad.h"
#include"Serial.h"

#include<iostream>
#include<vector>
#include<array>

class Bus
{
public:
	Bus(std::vector<uint8_t> romData, std::shared_ptr<InterruptManager>& interruptManager, std::shared_ptr<PPU>& ppu, std::shared_ptr<APU>& apu, std::shared_ptr<Timer>& timer, std::shared_ptr<Joypad>& joypad, std::shared_ptr<Serial>& serial);
	~Bus();

	void setInTestingMode();

	uint8_t read(uint16_t address, bool doTick=true);
	void write(uint16_t address, uint8_t value, bool doTick=true);
	void doIncCorruption();

	void tick();
private:
	uint8_t m_bootRom[256] = { 0x31,0xfe,0xff,0xaf,0x21,0xff,0x9f,0x32,0xcb,0x7c,0x20,0xfb,0x21,0x26,0xff,0xe,0x11,0x3e,0x80,0x32,0xe2,0xc,0x3e,0xf3,0xe2,0x32,0x3e,0x77,0x77,0x3e,0xfc,0xe0,0x47,0x11,0x4,0x1,0x21,0x10,0x80,0x1a,0xcd,0x95,0x0,0xcd,0x96,0x0,0x13,0x7b,0xfe,0x34,0x20,0xf3,0x11,0xd8,0x0,0x6,0x8,0x1a,0x13,0x22,0x23,0x5,0x20,0xf9,0x3e,0x19,0xea,0x10,0x99,0x21,0x2f,0x99,0xe,0xc,0x3d,0x28,0x8,0x32,0xd,0x20,0xf9,0x2e,0xf,0x18,0xf3,0x67,0x3e,0x64,0x57,0xe0,0x42,0x3e,0x91,0xe0,0x40,0x4,0x1e,0x2,0xe,0xc,0xf0,0x44,0xfe,0x90,0x20,0xfa,0xd,0x20,0xf7,0x1d,0x20,0xf2,0xe,0x13,0x24,0x7c,0x1e,0x83,0xfe,0x62,0x28,0x6,0x1e,0xc1,0xfe,0x64,0x20,0x6,0x7b,0xe2,0xc,0x3e,0x87,0xe2,0xf0,0x42,0x90,0xe0,0x42,0x15,0x20,0xd2,0x5,0x20,0x4f,0x16,0x20,0x18,0xcb,0x4f,0x6,0x4,0xc5,0xcb,0x11,0x17,0xc1,0xcb,0x11,0x17,0x5,0x20,0xf5,0x22,0x23,0x22,0x23,0xc9,0xce,0xed,0x66,0x66,0xcc,0xd,0x0,0xb,0x3,0x73,0x0,0x83,0x0,0xc,0x0,0xd,0x0,0x8,0x11,0x1f,0x88,0x89,0x0,0xe,0xdc,0xcc,0x6e,0xe6,0xdd,0xdd,0xd9,0x99,0xbb,0xbb,0x67,0x63,0x6e,0xe,0xec,0xcc,0xdd,0xdc,0x99,0x9f,0xbb,0xb9,0x33,0x3e,0x3c,0x42,0xb9,0xa5,0xb9,0xa5,0x42,0x3c,0x21,0x4,0x1,0x11,0xa8,0x0,0x1a,0x13,0xbe,0x20,0xfe,0x23,0x7d,0xfe,0x34,0x20,0xf5,0x6,0x19,0x78,0x86,0x23,0x5,0x20,0xfb,0x86,0x20,0xfe,0x3e,0x1,0xe0,0x50 };
	bool m_inBootRom;
	std::array<uint8_t, 8192> m_WRAM;
	std::array<uint8_t, 128> m_HRAM;

	uint8_t internalRead(uint16_t address);
	void internalWrite(uint16_t address, uint8_t value);

	bool m_testingDisableAPU = false;


	bool m_OAMDMARequested = false;
	bool m_OAMDMAInProgress = false;
	uint16_t m_OAMDMASrc = 0;
	uint16_t m_provisionedDMASrc = 0;
	int m_OAMDMAWaitCycles = 0;
	uint8_t m_OAMDMALastByte = 0xFF;	//last value written to dma register
	uint8_t m_OAMDMAConflictByte = 0;	//last value transferred in dma
	void m_transferDMAByte();

	std::shared_ptr<Cartridge> m_cartridge;
	std::shared_ptr<InterruptManager> m_interruptManager;
	std::shared_ptr<PPU> m_ppu;
	std::shared_ptr<APU> m_apu;
	std::shared_ptr<Timer> m_timer;
	std::shared_ptr<Joypad> m_joypad;
	std::shared_ptr<Serial> m_serial;
};